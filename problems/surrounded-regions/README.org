* Leetcode: Surrounded Regions                                  :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     graph, redo, dfs
:END:
---------------------------------------------------------------------
Surrounded Regions
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/bag-of-tokens"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dfs][#dfs]], [[https://code.dennyzhang.com/review-graph][#graph]]
---------------------------------------------------------------------
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.
#+BEGIN_EXAMPLE
For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/surrounded-regions][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/surrounded-regions/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/surrounded-regions
## Basic Ideas: Two kind of Os: 
##                 1 it will definitely not surrounded by 'X'. This happens when 'O' happens in the boarders.
##                 2 it might or might not
##
##              For case1, we mark it to 'Y'. Then go with DFS
##              After one pass, for positions of remaining O, they are all surrounded by 'X'
##                              for positions of all 'Y', they're fine
##
##             X    X    X    X    X
##             X    O    O    O    X
##             X    O    X    O    X
##             X    O    O    O    X
##             X    X    X    X    X
##             X    X    O    O    X
##             X    X    O    X    X
##
## Complexity: Time O(n*m), Space O(1)
class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        self.row_count = len(board)
        if self.row_count == 0: return
        self.col_count = len(board[0])

        # mark 'O' on boarders to 'Y'
        for i in [0, self.row_count-1]:
            for j in xrange(self.col_count):
                if board[i][j] == 'O': board[i][j] = 'Y'

        for i in xrange(self.row_count):
            for j in [0, self.col_count-1]:
                if board[i][j] == 'O': board[i][j] = 'Y'

        # print board
        # mark nodes
        for i in xrange(self.row_count):
            for j in xrange(self.col_count):
                if board[i][j] == 'O':
                    self.DFSMark(board, i, j)

        # print board
        # change 'O' to 'X', change 'Y' to 'O'
        for i in xrange(self.row_count):
            for j in xrange(self.col_count):
                if board[i][j] == 'O': board[i][j] = 'X'
                if board[i][j] == 'Y': board[i][j] = 'O'

    def DFSMark(self, board, i, j):
        # out of bound
        if i < 0 or i >= self.row_count or \
            j < 0 or j >= self.col_count:
                return

        # If the element is 'Y', we won't keep going neither.
        # This will save duplicate caculation
        if board[i][j] != 'O':
            return

        if self.hasAdjacentY(board, i, j):
            board[i][j] = 'Y'
            self.DFSMark(board, i-1, j)
            self.DFSMark(board, i+1, j)
            self.DFSMark(board, i, j-1)
            self.DFSMark(board, i, j+1)

    def hasAdjacentY(self, board, i, j):
        if i > 0 and board[i-1][j] == 'Y': return True
        if i < self.row_count-1 and board[i+1][j] == 'Y': return True
        if j > 0 and board[i][j-1] == 'Y': return True
        if j < self.col_count-1 and board[i][j+1] == 'Y': return True
        return False        
        
# s = Solution()
# # board = [["O","X","X","O","X"],["X","O","O","X","O"],["X","O","X","O","X"],["O","X","O","O","O"],["X","X","O","X","O"]]
# board = [["X","O","O","X","X","X","O","X","O","O"],["X","O","X","X","X","X","X","X","X","X"],["X","X","X","X","O","X","X","X","X","X"],["X","O","X","X","X","O","X","X","X","O"],["O","X","X","X","O","X","O","X","O","X"],["X","X","O","X","X","O","O","X","X","X"],["O","X","X","O","O","X","O","X","X","O"],["O","X","X","X","X","X","O","X","X","X"],["X","O","O","X","X","O","X","X","O","O"],["X","X","X","O","O","X","O","X","X","O"]]
# s.solve(board)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
